{"_type":"export","__export_format":4,"__export_date":"2022-07-25T01:46:21.425Z","__export_source":"insomnia.desktop.app:v2022.3.0","resources":[{"_id":"greq_6a54c1c875fb436283e0b424dc680ab3","parentId":"fld_6274a94b18704df1abcb23c145ed5e15","modified":1658713520936,"created":1656723908918,"url":"localhost:3002","name":"Get new connection","description":"","protoFileId":"pf_d54318d8dab54253b96fb65bcfafb4e9","protoMethodName":"/codectrl.logs_service.LogServer/RegisterClient","metadata":[],"body":{"text":"{}"},"metaSortKey":-1656723908918,"isPrivate":false,"_type":"grpc_request"},{"_id":"fld_6274a94b18704df1abcb23c145ed5e15","parentId":"wrk_17bf9a6d97a44219b2f1e45be87787fa","modified":1656723896030,"created":1656723896030,"name":"Registration","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1656723896030,"_type":"request_group"},{"_id":"wrk_17bf9a6d97a44219b2f1e45be87787fa","parentId":null,"modified":1656466299909,"created":1656466299909,"name":"codectrl","description":"","scope":"collection","_type":"workspace"},{"_id":"greq_f9ca62ef7caf4e7486431d05fe786be1","parentId":"fld_6274a94b18704df1abcb23c145ed5e15","modified":1658713524425,"created":1658709859543,"url":"localhost:3002","name":"Re-register client","description":"","protoFileId":"pf_d54318d8dab54253b96fb65bcfafb4e9","protoMethodName":"/codectrl.logs_service.LogServer/RegisterExistingClient","metadata":[],"body":{"text":"{}"},"metaSortKey":-1656723908868,"isPrivate":false,"_type":"grpc_request"},{"_id":"greq_4ecd61c2b2a64c0193fee9697d66f1a2","parentId":"fld_927a87a8e0cf49d6944601e849b4a0d6","modified":1658713530264,"created":1656468326398,"url":"127.0.0.1:3002","name":"Get log stream","description":"","protoFileId":"pf_d54318d8dab54253b96fb65bcfafb4e9","protoMethodName":"/codectrl.logs_service.LogServer/GetLogs","metadata":[],"body":{"text":"{}"},"metaSortKey":-1656509247880,"isPrivate":false,"_type":"grpc_request"},{"_id":"fld_927a87a8e0cf49d6944601e849b4a0d6","parentId":"wrk_17bf9a6d97a44219b2f1e45be87787fa","modified":1656550196375,"created":1656550169361,"name":"Get","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1656550169362,"_type":"request_group"},{"_id":"greq_70ca68469e9c47a7813cd21923c178c2","parentId":"fld_927a87a8e0cf49d6944601e849b4a0d6","modified":1658713534815,"created":1656466473764,"url":"127.0.0.1:3002","name":"Get top log","description":"","protoFileId":"pf_d54318d8dab54253b96fb65bcfafb4e9","protoMethodName":"/codectrl.logs_service.LogServer/GetLog","metadata":[],"body":{"text":"{}"},"metaSortKey":-1656509247830,"isPrivate":false,"_type":"grpc_request"},{"_id":"greq_9244513a864044a1a2b1a3d0e61d1d02","parentId":"fld_00ea1b5b5edc48f4bd81f3a35b629e5c","modified":1658713536761,"created":1656545592555,"url":"localhost:3002","name":"Send log stream","description":"","protoFileId":"pf_d54318d8dab54253b96fb65bcfafb4e9","protoMethodName":"/codectrl.logs_service.LogClient/SendLogs","metadata":[{"id":"pair_e7d333e7719c414a866403b9342ee9bb","name":"x-host","value":"localhost","description":""}],"body":{"text":"{}"},"metaSortKey":-1656466473739,"isPrivate":false,"_type":"grpc_request"},{"_id":"fld_00ea1b5b5edc48f4bd81f3a35b629e5c","parentId":"wrk_17bf9a6d97a44219b2f1e45be87787fa","modified":1656550205441,"created":1656550202922,"name":"Send","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1656508321550.5,"_type":"request_group"},{"_id":"greq_c3407c4e00bf43bba2737cfcf9d5f5bc","parentId":"fld_00ea1b5b5edc48f4bd81f3a35b629e5c","modified":1658713537776,"created":1656545560858,"url":"localhost:3002","name":"Send log","description":"","protoFileId":"pf_d54318d8dab54253b96fb65bcfafb4e9","protoMethodName":"/codectrl.logs_service.LogClient/SendLog","metadata":[{"id":"pair_0cdc677f279f421a96b29b88c3570063","name":"x-host","value":"localhost","description":""}],"body":{"text":"{}"},"metaSortKey":-1656466473689,"isPrivate":false,"_type":"grpc_request"},{"_id":"env_b9e641dc18a7de02eec58cd1b159c059f7ec76f4","parentId":"wrk_17bf9a6d97a44219b2f1e45be87787fa","modified":1656550139199,"created":1656466299915,"name":"Base Environment","data":{},"dataPropertyOrder":{},"color":null,"isPrivate":false,"metaSortKey":1656466299915,"_type":"environment"},{"_id":"jar_b9e641dc18a7de02eec58cd1b159c059f7ec76f4","parentId":"wrk_17bf9a6d97a44219b2f1e45be87787fa","modified":1656466299916,"created":1656466299916,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_4ff0537bb2a643368bf7a24310529503","parentId":"wrk_17bf9a6d97a44219b2f1e45be87787fa","modified":1656466299911,"created":1656466299911,"fileName":"codectrl","contents":"","contentType":"yaml","_type":"api_spec"},{"_id":"pd_10be37764c0e4ccf975924015f8c79c1","parentId":"wrk_17bf9a6d97a44219b2f1e45be87787fa","modified":1656723804885,"created":1656723804885,"name":"codectrl-protobuf","_type":"proto_directory"},{"_id":"pf_22d08c904aed403784b3a154594753b9","parentId":"pd_10be37764c0e4ccf975924015f8c79c1","modified":1656723804862,"created":1656723804862,"name":"backtrace_data.proto","protoText":"syntax = \"proto3\";\n\npackage codectrl.data.backtrace_data;\n\n// Generalised message containing information regarding a single stacktrace\n// item.\nmessage BacktraceData {\n  string name         = 1;\n  string filePath     = 2;\n  uint32 lineNumber   = 3;\n  uint32 columnNumber = 4;\n  string code         = 5;\n}\n","_type":"proto_file"},{"_id":"pf_d54318d8dab54253b96fb65bcfafb4e9","parentId":"pd_10be37764c0e4ccf975924015f8c79c1","modified":1656723804871,"created":1656723804871,"name":"cc_service.proto","protoText":"\nsyntax = \"proto3\";\n\npackage codectrl.logs_service;\n\nimport \"log.proto\";\n\n// Empty is needed because protobuf has no concept of a `()` (unit type) or\n// void type, every rpc needs to have at least one argument, so `Empty` is\n// provided when no argument is required.\nmessage Empty {}\n\n// Status codes for whether or not a particular request has succeeded.\nenum RequestStatus {\n  CONFIRMED = 0;\n  ERROR = 1;\n}\n\n// Describes the connection between the interface and a given server. Each\n// client is suppllied with a uuid that is saved to disk or to localStorage.\n// The server uses this information to determine which logs should be sent to\n// each client and to skip duplicate identified by the `uuid` of the log.\nmessage Connection {\n  string uuid = 1;\n}\n\n// Returned by the procedures to describe the result of a request.\nmessage RequestResult {\n  string        message = 1;\n  RequestStatus status  = 2;\n}\n\n// LogServer is the service that should only be implemented by log servers\n// that can be connected to by a CodeCtrl front-end. Language loggers should\n// not implement this service or use it as a client for that matter. Ways of\n// enforcing that only servers can receive logs iS TBD but will be worked on\n// in the future.\nservice LogServer {\n  // Gets the latest log from the server, generally not used but is here for\n  // compatibiliy's sake in the case where a front-end cannot use a stream.\n  rpc GetLog(Connection)                 returns (data.log.Log)        {}\n\n  // Gets a stream of the available logs, this should be preferred over\n  // `GetLog` when possible.\n  rpc GetLogs(Connection)                returns (stream data.log.Log) {}\n\n  // Registers a new front-end connection to a server instance and returns the\n  // `Connection` message with a `uuid`.\n  rpc RegisterClient(Empty)              returns (Connection)          {}\n\n  // Registers an already pre-existing connection to a server instance using an\n  // already generated `uuid` supplied in the `Connection`. Servers should\n  // verify that the supplied `uuid` is, in fact, a valid hyphenated v4 UUID.\n  // Returns a boolean whether or not the registration was succesful.\n  rpc RegisterExistingClient(Connection) returns (RequestResult)       {}\n}\n\n// LogClient is the service that needs to be implemented by log servers so\n// they can determine how the logs are stored when they are received by the\n// server. Loggers must only use this service as a client.\nservice LogClient {\n  // Sends a single log. Should only be used in cases where log batching is\n  // not possible or not determinable.\n  rpc SendLog(data.log.Log)         returns (RequestResult) {}\n\n  // Sends a stream of logs. Should generally be preferred over `SendLog` as\n  // it allows for batch sending of `Log`s and _should_ be more efficient on\n  // resources.\n  rpc SendLogs(stream data.log.Log) returns (RequestResult) {}\n}\n\n","_type":"proto_file"},{"_id":"pf_2f322a8fdf8140eaa36f96f5e21869c0","parentId":"pd_10be37764c0e4ccf975924015f8c79c1","modified":1656723804884,"created":1656723804884,"name":"log.proto","protoText":"syntax = \"proto3\";\n\npackage codectrl.data.log;\n\nimport \"backtrace_data.proto\";\n\n// Main log message for use when sending to a CodeCtrl gRPC server.\nmessage Log {\n  // NOTE: This field should be generated by CodeCtrl gRPC servers, any value\n  // assigned to it by loggers will be overwritten. Therefore, leave it as a\n  // blank.\n  string                                uuid        = 1;\n  repeated backtrace_data.BacktraceData stack       = 2;\n  uint32                                lineNumber  = 3;\n  map<string, string>                   codeSnippet = 4;\n  string                                message     = 5;\n  string                                messageType = 6;\n  string                                fileName    = 7;\n  string                                address     = 8;\n  string                                language    = 9;\n  repeated string                       warnings    = 10;\n}\n","_type":"proto_file"}]}